{"ast":null,"code":"import _asyncToGenerator from \"D:/TestPoc/doc-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Component, Output, Input, ViewChildren, NgModule } from '@angular/core';\nimport * as i1 from '@angular/platform-browser';\nimport { getViewerDetails, isLocalFile, replaceLocalUrl, getDocxToHtml, googleCheckSubscription, iframeIsLoaded } from 'docviewhelper';\nexport * from 'docviewhelper';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nconst _c0 = [\"iframe\"];\nfunction NgxDocViewerComponent_ng_container_0_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 3);\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"innerHtml\", ctx_r2.docHtml, i0.ɵɵsanitizeHtml);\n  }\n}\nfunction NgxDocViewerComponent_ng_container_0_object_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"object\", 4)(1, \"p\");\n    i0.ɵɵtext(2, \" Your browser does not support PDFs. \");\n    i0.ɵɵelementStart(3, \"a\", 5);\n    i0.ɵɵtext(4, \"Download the PDF\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(5, \". \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"data\", ctx_r3.fullUrl, i0.ɵɵsanitizeResourceUrl);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"href\", ctx_r3.fullUrl, i0.ɵɵsanitizeUrl);\n  }\n}\nfunction NgxDocViewerComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NgxDocViewerComponent_ng_container_0_div_1_Template, 1, 1, \"div\", 1);\n    i0.ɵɵtemplate(2, NgxDocViewerComponent_ng_container_0_object_2_Template, 6, 2, \"object\", 2);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.configuredViewer !== \"pdf\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.fullUrl && ctx_r0.configuredViewer === \"pdf\");\n  }\n}\nfunction NgxDocViewerComponent_ng_container_1_iframe_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"iframe\", 8, 9);\n    i0.ɵɵlistener(\"load\", function NgxDocViewerComponent_ng_container_1_iframe_1_Template_iframe_load_0_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r7.iframeLoaded());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"src\", ctx_r4.fullUrl, i0.ɵɵsanitizeResourceUrl);\n  }\n}\nfunction NgxDocViewerComponent_ng_container_1_div_2_iframe_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"iframe\", 12, 9);\n    i0.ɵɵlistener(\"load\", function NgxDocViewerComponent_ng_container_1_div_2_iframe_2_Template_iframe_load_0_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r11.iframeLoaded());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"src\", ctx_r9.fullUrl, i0.ɵɵsanitizeResourceUrl);\n  }\n}\nfunction NgxDocViewerComponent_ng_container_1_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵelement(1, \"div\");\n    i0.ɵɵtemplate(2, NgxDocViewerComponent_ng_container_1_div_2_iframe_2_Template, 2, 1, \"iframe\", 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"background-color\", ctx_r5.disableContent === \"popout-hide\" ? \"#fff\" : \"transparent\");\n    i0.ɵɵclassProp(\"overlay-full\", ctx_r5.disableContent === \"all\")(\"overlay-popout-google\", ctx_r5.configuredViewer === \"google\" && (ctx_r5.disableContent === \"popout\" || ctx_r5.disableContent === \"popout-hide\"))(\"overlay-popout-office\", ctx_r5.configuredViewer === \"office\" && (ctx_r5.disableContent === \"popout\" || ctx_r5.disableContent === \"popout-hide\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.fullUrl);\n  }\n}\nfunction NgxDocViewerComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NgxDocViewerComponent_ng_container_1_iframe_1_Template, 2, 1, \"iframe\", 6);\n    i0.ɵɵtemplate(2, NgxDocViewerComponent_ng_container_1_div_2_Template, 3, 9, \"div\", 7);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.fullUrl && ctx_r1.disableContent === \"none\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.disableContent !== \"none\");\n  }\n}\nclass NgxDocViewerComponent {\n  constructor(domSanitizer, ngZone) {\n    this.domSanitizer = domSanitizer;\n    this.ngZone = ngZone;\n    this.loaded = new EventEmitter();\n    this.url = '';\n    this.queryParams = '';\n    this.viewerUrl = '';\n    this.googleCheckInterval = 3000;\n    this.googleMaxChecks = 5;\n    this.disableContent = 'none';\n    this.googleCheckContentLoaded = true;\n    this.viewer = 'google';\n    this.overrideLocalhost = '';\n    this.iframes = undefined;\n    this.fullUrl = undefined;\n    this.externalViewer = false;\n    this.docHtml = '';\n    this.configuredViewer = 'google';\n    this.checkIFrameSubscription = undefined;\n    this.shouldCheckIframe = false;\n  }\n  ngAfterViewInit() {\n    if (this.shouldCheckIframe) {\n      const iframe = this.iframes?.first?.nativeElement;\n      if (iframe) {\n        this.shouldCheckIframe = false;\n        this.reloadIframe(iframe);\n      }\n    }\n  }\n  ngOnDestroy() {\n    if (this.checkIFrameSubscription) {\n      this.checkIFrameSubscription.unsubscribe();\n    }\n  }\n  ngOnChanges(changes) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (changes && changes['viewer'] && (changes['viewer'].isFirstChange || changes['viewer'].currentValue !== changes['viewer'].previousValue)) {\n        if (_this.viewer !== 'google' && _this.viewer !== 'office' && _this.viewer !== 'mammoth' && _this.viewer !== 'pdf' && _this.viewer !== 'url') {\n          console.error(`Unsupported viewer: '${_this.viewer}'. Supported viewers: google, office, mammoth and pdf`);\n        }\n        _this.configuredViewer = _this.viewer;\n      }\n      if (changes['url'] && changes['url'].currentValue !== changes['url'].previousValue || changes['viewer'] && changes['viewer'].currentValue !== changes['viewer'].previousValue || changes['viewerUrl'] && changes['viewerUrl'].currentValue !== changes['viewerUrl'].previousValue) {\n        let viewerDetails = getViewerDetails(_this.url, _this.configuredViewer, _this.queryParams, _this.viewerUrl);\n        _this.externalViewer = viewerDetails.externalViewer;\n        if (viewerDetails.externalViewer && _this.overrideLocalhost && isLocalFile(_this.url)) {\n          const newUrl = replaceLocalUrl(_this.url, _this.overrideLocalhost);\n          viewerDetails = getViewerDetails(newUrl, _this.configuredViewer, _this.queryParams, _this.viewerUrl);\n        }\n        _this.docHtml = '';\n        if (_this.checkIFrameSubscription) {\n          _this.checkIFrameSubscription.unsubscribe();\n        }\n        if (!_this.url) {\n          _this.fullUrl = undefined;\n        } else if (viewerDetails.externalViewer || _this.configuredViewer === 'url' || _this.configuredViewer === 'pdf') {\n          _this.fullUrl = _this.domSanitizer.bypassSecurityTrustResourceUrl(viewerDetails.url);\n          // see:\n          // https://stackoverflow.com/questions/40414039/google-docs-viewer-returning-204-responses-no-longer-working-alternatives\n          // hack to reload iframe if it's not loaded.\n          // would maybe be better to use view.officeapps.live.com but seems not to work with sas token.\n          if (_this.configuredViewer === 'google' && _this.googleCheckContentLoaded) {\n            _this.ngZone.runOutsideAngular(() => {\n              // if it's not loaded after the googleIntervalCheck, then open load again.\n              const iframe = _this.iframes?.first?.nativeElement;\n              if (iframe) {\n                _this.reloadIframe(iframe);\n              } else {\n                _this.shouldCheckIframe = true;\n              }\n            });\n          }\n        } else if (_this.configuredViewer === 'mammoth') {\n          _this.docHtml = yield getDocxToHtml(_this.url);\n        }\n      }\n    })();\n  }\n  reloadIframe(iframe) {\n    this.checkIFrameSubscription = googleCheckSubscription();\n    this.checkIFrameSubscription.subscribe(iframe, this.googleCheckInterval, this.googleMaxChecks);\n  }\n  iframeLoaded() {\n    const iframe = this.iframes?.first?.nativeElement;\n    if (iframe && iframeIsLoaded(iframe)) {\n      this.loaded.emit(undefined);\n      if (this.checkIFrameSubscription) {\n        this.checkIFrameSubscription.unsubscribe();\n      }\n    }\n  }\n}\nNgxDocViewerComponent.ɵfac = function NgxDocViewerComponent_Factory(t) {\n  return new (t || NgxDocViewerComponent)(i0.ɵɵdirectiveInject(i1.DomSanitizer), i0.ɵɵdirectiveInject(i0.NgZone));\n};\nNgxDocViewerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxDocViewerComponent,\n  selectors: [[\"ngx-doc-viewer\"]],\n  viewQuery: function NgxDocViewerComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.iframes = _t);\n    }\n  },\n  inputs: {\n    url: \"url\",\n    queryParams: \"queryParams\",\n    viewerUrl: \"viewerUrl\",\n    googleCheckInterval: \"googleCheckInterval\",\n    googleMaxChecks: \"googleMaxChecks\",\n    disableContent: \"disableContent\",\n    googleCheckContentLoaded: \"googleCheckContentLoaded\",\n    viewer: \"viewer\",\n    overrideLocalhost: \"overrideLocalhost\"\n  },\n  outputs: {\n    loaded: \"loaded\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 2,\n  consts: [[4, \"ngIf\"], [3, \"innerHtml\", 4, \"ngIf\"], [\"type\", \"application/pdf\", \"width\", \"100%\", \"height\", \"100%\", 3, \"data\", 4, \"ngIf\"], [3, \"innerHtml\"], [\"type\", \"application/pdf\", \"width\", \"100%\", \"height\", \"100%\", 3, \"data\"], [3, \"href\"], [\"id\", \"iframe-doc-viewer\", \"frameBorder\", \"0\", 3, \"src\", \"load\", 4, \"ngIf\"], [\"class\", \"container\", 4, \"ngIf\"], [\"id\", \"iframe-doc-viewer\", \"frameBorder\", \"0\", 3, \"src\", \"load\"], [\"iframe\", \"\"], [1, \"container\"], [\"id\", \"iframe\", \"frameBorder\", \"0\", 3, \"src\", \"load\", 4, \"ngIf\"], [\"id\", \"iframe\", \"frameBorder\", \"0\", 3, \"src\", \"load\"]],\n  template: function NgxDocViewerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, NgxDocViewerComponent_ng_container_0_Template, 3, 2, \"ng-container\", 0);\n      i0.ɵɵtemplate(1, NgxDocViewerComponent_ng_container_1_Template, 3, 2, \"ng-container\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", !ctx.externalViewer);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.externalViewer);\n    }\n  },\n  dependencies: [i2.NgIf],\n  styles: [\"[_nghost-%COMP%]{display:block}.container[_ngcontent-%COMP%]{width:100%;height:100%;position:relative}.overlay-popout-google[_ngcontent-%COMP%]{width:40px;height:40px;right:26px;top:11.5px;position:absolute;z-index:1000}.overlay-popout-office[_ngcontent-%COMP%]{width:100px;height:20px;right:0;bottom:0;position:absolute;z-index:1000}.overlay-full[_ngcontent-%COMP%]{width:100%;height:100%;right:0;top:0;position:absolute;z-index:1000}iframe[_ngcontent-%COMP%]{width:100%;height:100%}\"]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxDocViewerComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-doc-viewer',\n      template: \"<ng-container *ngIf=\\\"!externalViewer\\\">\\n  <div *ngIf=\\\"configuredViewer !== 'pdf'\\\" [innerHtml]=\\\"docHtml\\\"></div>\\n  <object\\n    *ngIf=\\\"fullUrl && configuredViewer === 'pdf'\\\"\\n    [data]=\\\"fullUrl\\\"\\n    type=\\\"application/pdf\\\"\\n    width=\\\"100%\\\"\\n    height=\\\"100%\\\"\\n  >\\n    <p>\\n      Your browser does not support PDFs.\\n      <a [href]=\\\"fullUrl\\\">Download the PDF</a>.\\n    </p>\\n  </object>\\n</ng-container>\\n<ng-container *ngIf=\\\"externalViewer\\\">\\n  <iframe\\n    (load)=\\\"iframeLoaded()\\\"\\n    *ngIf=\\\"fullUrl && disableContent === 'none'\\\"\\n    #iframe\\n    id=\\\"iframe-doc-viewer\\\"\\n    frameBorder=\\\"0\\\"\\n    [src]=\\\"fullUrl\\\"\\n  ></iframe>\\n  <div class=\\\"container\\\" *ngIf=\\\"disableContent !== 'none'\\\">\\n    <div\\n      [class.overlay-full]=\\\"disableContent === 'all'\\\"\\n      [class.overlay-popout-google]=\\\"\\n        configuredViewer === 'google' &&\\n        (disableContent === 'popout' || disableContent === 'popout-hide')\\n      \\\"\\n      [class.overlay-popout-office]=\\\"\\n        configuredViewer === 'office' &&\\n        (disableContent === 'popout' || disableContent === 'popout-hide')\\n      \\\"\\n      [style.background-color]=\\\"\\n        disableContent === 'popout-hide' ? '#fff' : 'transparent'\\n      \\\"\\n    ></div>\\n    <iframe\\n      (load)=\\\"iframeLoaded()\\\"\\n      *ngIf=\\\"fullUrl\\\"\\n      #iframe\\n      id=\\\"iframe\\\"\\n      frameBorder=\\\"0\\\"\\n      [src]=\\\"fullUrl\\\"\\n    ></iframe>\\n  </div>\\n</ng-container>\\n\",\n      styles: [\":host{display:block}.container{width:100%;height:100%;position:relative}.overlay-popout-google{width:40px;height:40px;right:26px;top:11.5px;position:absolute;z-index:1000}.overlay-popout-office{width:100px;height:20px;right:0;bottom:0;position:absolute;z-index:1000}.overlay-full{width:100%;height:100%;right:0;top:0;position:absolute;z-index:1000}iframe{width:100%;height:100%}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i1.DomSanitizer\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    loaded: [{\n      type: Output\n    }],\n    url: [{\n      type: Input\n    }],\n    queryParams: [{\n      type: Input\n    }],\n    viewerUrl: [{\n      type: Input\n    }],\n    googleCheckInterval: [{\n      type: Input\n    }],\n    googleMaxChecks: [{\n      type: Input\n    }],\n    disableContent: [{\n      type: Input\n    }],\n    googleCheckContentLoaded: [{\n      type: Input\n    }],\n    viewer: [{\n      type: Input\n    }],\n    overrideLocalhost: [{\n      type: Input\n    }],\n    iframes: [{\n      type: ViewChildren,\n      args: ['iframe']\n    }]\n  });\n})();\nclass NgxDocViewerModule {}\nNgxDocViewerModule.ɵfac = function NgxDocViewerModule_Factory(t) {\n  return new (t || NgxDocViewerModule)();\n};\nNgxDocViewerModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxDocViewerModule\n});\nNgxDocViewerModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [CommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxDocViewerModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [NgxDocViewerComponent],\n      exports: [NgxDocViewerComponent]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgxDocViewerComponent, NgxDocViewerModule };\n//# sourceMappingURL=ngx-doc-viewer.mjs.map","map":{"version":3,"names":["i0","EventEmitter","Component","Output","Input","ViewChildren","NgModule","i1","getViewerDetails","isLocalFile","replaceLocalUrl","getDocxToHtml","googleCheckSubscription","iframeIsLoaded","i2","CommonModule","NgxDocViewerComponent","constructor","domSanitizer","ngZone","loaded","url","queryParams","viewerUrl","googleCheckInterval","googleMaxChecks","disableContent","googleCheckContentLoaded","viewer","overrideLocalhost","iframes","undefined","fullUrl","externalViewer","docHtml","configuredViewer","checkIFrameSubscription","shouldCheckIframe","ngAfterViewInit","iframe","first","nativeElement","reloadIframe","ngOnDestroy","unsubscribe","ngOnChanges","changes","isFirstChange","currentValue","previousValue","console","error","viewerDetails","newUrl","bypassSecurityTrustResourceUrl","runOutsideAngular","subscribe","iframeLoaded","emit","ɵfac","DomSanitizer","NgZone","ɵcmp","NgIf","type","args","selector","template","styles","NgxDocViewerModule","ɵmod","ɵinj","imports","declarations","exports"],"sources":["D:/TestPoc/doc-app/node_modules/ngx-doc-viewer/fesm2020/ngx-doc-viewer.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { EventEmitter, Component, Output, Input, ViewChildren, NgModule } from '@angular/core';\nimport * as i1 from '@angular/platform-browser';\nimport { getViewerDetails, isLocalFile, replaceLocalUrl, getDocxToHtml, googleCheckSubscription, iframeIsLoaded } from 'docviewhelper';\nexport * from 'docviewhelper';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nclass NgxDocViewerComponent {\n    constructor(domSanitizer, ngZone) {\n        this.domSanitizer = domSanitizer;\n        this.ngZone = ngZone;\n        this.loaded = new EventEmitter();\n        this.url = '';\n        this.queryParams = '';\n        this.viewerUrl = '';\n        this.googleCheckInterval = 3000;\n        this.googleMaxChecks = 5;\n        this.disableContent = 'none';\n        this.googleCheckContentLoaded = true;\n        this.viewer = 'google';\n        this.overrideLocalhost = '';\n        this.iframes = undefined;\n        this.fullUrl = undefined;\n        this.externalViewer = false;\n        this.docHtml = '';\n        this.configuredViewer = 'google';\n        this.checkIFrameSubscription = undefined;\n        this.shouldCheckIframe = false;\n    }\n    ngAfterViewInit() {\n        if (this.shouldCheckIframe) {\n            const iframe = this.iframes?.first?.nativeElement;\n            if (iframe) {\n                this.shouldCheckIframe = false;\n                this.reloadIframe(iframe);\n            }\n        }\n    }\n    ngOnDestroy() {\n        if (this.checkIFrameSubscription) {\n            this.checkIFrameSubscription.unsubscribe();\n        }\n    }\n    async ngOnChanges(changes) {\n        if (changes &&\n            changes['viewer'] &&\n            (changes['viewer'].isFirstChange ||\n                changes['viewer'].currentValue !== changes['viewer'].previousValue)) {\n            if (this.viewer !== 'google' &&\n                this.viewer !== 'office' &&\n                this.viewer !== 'mammoth' &&\n                this.viewer !== 'pdf' &&\n                this.viewer !== 'url') {\n                console.error(`Unsupported viewer: '${this.viewer}'. Supported viewers: google, office, mammoth and pdf`);\n            }\n            this.configuredViewer = this.viewer;\n        }\n        if ((changes['url'] &&\n            changes['url'].currentValue !== changes['url'].previousValue) ||\n            (changes['viewer'] &&\n                changes['viewer'].currentValue !== changes['viewer'].previousValue) ||\n            (changes['viewerUrl'] &&\n                changes['viewerUrl'].currentValue !==\n                    changes['viewerUrl'].previousValue)) {\n            let viewerDetails = getViewerDetails(this.url, this.configuredViewer, this.queryParams, this.viewerUrl);\n            this.externalViewer = viewerDetails.externalViewer;\n            if (viewerDetails.externalViewer &&\n                this.overrideLocalhost &&\n                isLocalFile(this.url)) {\n                const newUrl = replaceLocalUrl(this.url, this.overrideLocalhost);\n                viewerDetails = getViewerDetails(newUrl, this.configuredViewer, this.queryParams, this.viewerUrl);\n            }\n            this.docHtml = '';\n            if (this.checkIFrameSubscription) {\n                this.checkIFrameSubscription.unsubscribe();\n            }\n            if (!this.url) {\n                this.fullUrl = undefined;\n            }\n            else if (viewerDetails.externalViewer ||\n                this.configuredViewer === 'url' ||\n                this.configuredViewer === 'pdf') {\n                this.fullUrl = this.domSanitizer.bypassSecurityTrustResourceUrl(viewerDetails.url);\n                // see:\n                // https://stackoverflow.com/questions/40414039/google-docs-viewer-returning-204-responses-no-longer-working-alternatives\n                // hack to reload iframe if it's not loaded.\n                // would maybe be better to use view.officeapps.live.com but seems not to work with sas token.\n                if (this.configuredViewer === 'google' &&\n                    this.googleCheckContentLoaded) {\n                    this.ngZone.runOutsideAngular(() => {\n                        // if it's not loaded after the googleIntervalCheck, then open load again.\n                        const iframe = this.iframes?.first\n                            ?.nativeElement;\n                        if (iframe) {\n                            this.reloadIframe(iframe);\n                        }\n                        else {\n                            this.shouldCheckIframe = true;\n                        }\n                    });\n                }\n            }\n            else if (this.configuredViewer === 'mammoth') {\n                this.docHtml = await getDocxToHtml(this.url);\n            }\n        }\n    }\n    reloadIframe(iframe) {\n        this.checkIFrameSubscription = googleCheckSubscription();\n        this.checkIFrameSubscription.subscribe(iframe, this.googleCheckInterval, this.googleMaxChecks);\n    }\n    iframeLoaded() {\n        const iframe = this.iframes?.first?.nativeElement;\n        if (iframe && iframeIsLoaded(iframe)) {\n            this.loaded.emit(undefined);\n            if (this.checkIFrameSubscription) {\n                this.checkIFrameSubscription.unsubscribe();\n            }\n        }\n    }\n}\nNgxDocViewerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: NgxDocViewerComponent, deps: [{ token: i1.DomSanitizer }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\nNgxDocViewerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.3\", type: NgxDocViewerComponent, selector: \"ngx-doc-viewer\", inputs: { url: \"url\", queryParams: \"queryParams\", viewerUrl: \"viewerUrl\", googleCheckInterval: \"googleCheckInterval\", googleMaxChecks: \"googleMaxChecks\", disableContent: \"disableContent\", googleCheckContentLoaded: \"googleCheckContentLoaded\", viewer: \"viewer\", overrideLocalhost: \"overrideLocalhost\" }, outputs: { loaded: \"loaded\" }, viewQueries: [{ propertyName: \"iframes\", predicate: [\"iframe\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: \"<ng-container *ngIf=\\\"!externalViewer\\\">\\n  <div *ngIf=\\\"configuredViewer !== 'pdf'\\\" [innerHtml]=\\\"docHtml\\\"></div>\\n  <object\\n    *ngIf=\\\"fullUrl && configuredViewer === 'pdf'\\\"\\n    [data]=\\\"fullUrl\\\"\\n    type=\\\"application/pdf\\\"\\n    width=\\\"100%\\\"\\n    height=\\\"100%\\\"\\n  >\\n    <p>\\n      Your browser does not support PDFs.\\n      <a [href]=\\\"fullUrl\\\">Download the PDF</a>.\\n    </p>\\n  </object>\\n</ng-container>\\n<ng-container *ngIf=\\\"externalViewer\\\">\\n  <iframe\\n    (load)=\\\"iframeLoaded()\\\"\\n    *ngIf=\\\"fullUrl && disableContent === 'none'\\\"\\n    #iframe\\n    id=\\\"iframe-doc-viewer\\\"\\n    frameBorder=\\\"0\\\"\\n    [src]=\\\"fullUrl\\\"\\n  ></iframe>\\n  <div class=\\\"container\\\" *ngIf=\\\"disableContent !== 'none'\\\">\\n    <div\\n      [class.overlay-full]=\\\"disableContent === 'all'\\\"\\n      [class.overlay-popout-google]=\\\"\\n        configuredViewer === 'google' &&\\n        (disableContent === 'popout' || disableContent === 'popout-hide')\\n      \\\"\\n      [class.overlay-popout-office]=\\\"\\n        configuredViewer === 'office' &&\\n        (disableContent === 'popout' || disableContent === 'popout-hide')\\n      \\\"\\n      [style.background-color]=\\\"\\n        disableContent === 'popout-hide' ? '#fff' : 'transparent'\\n      \\\"\\n    ></div>\\n    <iframe\\n      (load)=\\\"iframeLoaded()\\\"\\n      *ngIf=\\\"fullUrl\\\"\\n      #iframe\\n      id=\\\"iframe\\\"\\n      frameBorder=\\\"0\\\"\\n      [src]=\\\"fullUrl\\\"\\n    ></iframe>\\n  </div>\\n</ng-container>\\n\", styles: [\":host{display:block}.container{width:100%;height:100%;position:relative}.overlay-popout-google{width:40px;height:40px;right:26px;top:11.5px;position:absolute;z-index:1000}.overlay-popout-office{width:100px;height:20px;right:0;bottom:0;position:absolute;z-index:1000}.overlay-full{width:100%;height:100%;right:0;top:0;position:absolute;z-index:1000}iframe{width:100%;height:100%}\\n\"], dependencies: [{ kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: NgxDocViewerComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-doc-viewer', template: \"<ng-container *ngIf=\\\"!externalViewer\\\">\\n  <div *ngIf=\\\"configuredViewer !== 'pdf'\\\" [innerHtml]=\\\"docHtml\\\"></div>\\n  <object\\n    *ngIf=\\\"fullUrl && configuredViewer === 'pdf'\\\"\\n    [data]=\\\"fullUrl\\\"\\n    type=\\\"application/pdf\\\"\\n    width=\\\"100%\\\"\\n    height=\\\"100%\\\"\\n  >\\n    <p>\\n      Your browser does not support PDFs.\\n      <a [href]=\\\"fullUrl\\\">Download the PDF</a>.\\n    </p>\\n  </object>\\n</ng-container>\\n<ng-container *ngIf=\\\"externalViewer\\\">\\n  <iframe\\n    (load)=\\\"iframeLoaded()\\\"\\n    *ngIf=\\\"fullUrl && disableContent === 'none'\\\"\\n    #iframe\\n    id=\\\"iframe-doc-viewer\\\"\\n    frameBorder=\\\"0\\\"\\n    [src]=\\\"fullUrl\\\"\\n  ></iframe>\\n  <div class=\\\"container\\\" *ngIf=\\\"disableContent !== 'none'\\\">\\n    <div\\n      [class.overlay-full]=\\\"disableContent === 'all'\\\"\\n      [class.overlay-popout-google]=\\\"\\n        configuredViewer === 'google' &&\\n        (disableContent === 'popout' || disableContent === 'popout-hide')\\n      \\\"\\n      [class.overlay-popout-office]=\\\"\\n        configuredViewer === 'office' &&\\n        (disableContent === 'popout' || disableContent === 'popout-hide')\\n      \\\"\\n      [style.background-color]=\\\"\\n        disableContent === 'popout-hide' ? '#fff' : 'transparent'\\n      \\\"\\n    ></div>\\n    <iframe\\n      (load)=\\\"iframeLoaded()\\\"\\n      *ngIf=\\\"fullUrl\\\"\\n      #iframe\\n      id=\\\"iframe\\\"\\n      frameBorder=\\\"0\\\"\\n      [src]=\\\"fullUrl\\\"\\n    ></iframe>\\n  </div>\\n</ng-container>\\n\", styles: [\":host{display:block}.container{width:100%;height:100%;position:relative}.overlay-popout-google{width:40px;height:40px;right:26px;top:11.5px;position:absolute;z-index:1000}.overlay-popout-office{width:100px;height:20px;right:0;bottom:0;position:absolute;z-index:1000}.overlay-full{width:100%;height:100%;right:0;top:0;position:absolute;z-index:1000}iframe{width:100%;height:100%}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i1.DomSanitizer }, { type: i0.NgZone }]; }, propDecorators: { loaded: [{\n                type: Output\n            }], url: [{\n                type: Input\n            }], queryParams: [{\n                type: Input\n            }], viewerUrl: [{\n                type: Input\n            }], googleCheckInterval: [{\n                type: Input\n            }], googleMaxChecks: [{\n                type: Input\n            }], disableContent: [{\n                type: Input\n            }], googleCheckContentLoaded: [{\n                type: Input\n            }], viewer: [{\n                type: Input\n            }], overrideLocalhost: [{\n                type: Input\n            }], iframes: [{\n                type: ViewChildren,\n                args: ['iframe']\n            }] } });\n\nclass NgxDocViewerModule {\n}\nNgxDocViewerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: NgxDocViewerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNgxDocViewerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.3\", ngImport: i0, type: NgxDocViewerModule, declarations: [NgxDocViewerComponent], imports: [CommonModule], exports: [NgxDocViewerComponent] });\nNgxDocViewerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: NgxDocViewerModule, imports: [CommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.3\", ngImport: i0, type: NgxDocViewerModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [NgxDocViewerComponent],\n                    exports: [NgxDocViewerComponent],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgxDocViewerComponent, NgxDocViewerModule };\n//# sourceMappingURL=ngx-doc-viewer.mjs.map\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}